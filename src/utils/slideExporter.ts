
import PptxGenJS from 'pptxgenjs';

export const exportToPowerPoint = async (content: string, title: string) => {
  const pptx = new PptxGenJS();
  
  // Set presentation properties
  pptx.author = 'EasyTeach';
  pptx.company = 'EasyTeach';
  pptx.subject = title;
  pptx.title = title;

  // Split content into slides based on headers, bullet points, or sections
  const slides = parseContentIntoSlides(content, title);
  
  slides.forEach((slideData, index) => {
    const slide = pptx.addSlide();
    
    // Set background color
    slide.background = { color: 'F5F5F5' };
    
    // Add title
    if (slideData.title) {
      slide.addText(slideData.title, {
        x: 0.5,
        y: 0.5,
        w: 9,
        h: 1,
        fontSize: 28,
        bold: true,
        color: '2B4C8C',
        align: 'center'
      });
    }
    
    // Add content
    if (slideData.content && slideData.content.length > 0) {
      // Handle bullet points
      if (slideData.content.some(item => item.startsWith('•') || item.startsWith('-'))) {
        slide.addText(slideData.content.map(item => 
          item.replace(/^[•\-]\s*/, '• ')
        ), {
          x: 1,
          y: 2,
          w: 8,
          h: 5,
          fontSize: 16,
          bullet: true,
          color: '333333',
          lineSpacing: 32
        });
      } else {
        // Regular paragraph text
        slide.addText(slideData.content.join('\n\n'), {
          x: 1,
          y: 2,
          w: 8,
          h: 5,
          fontSize: 16,
          color: '333333',
          align: 'left',
          valign: 'top'
        });
      }
    }
    
    // Add slide number
    slide.addText(`${index + 1}`, {
      x: 9.5,
      y: 7,
      w: 0.5,
      h: 0.3,
      fontSize: 12,
      color: '666666',
      align: 'center'
    });
  });
  
  // Generate and download the presentation
  const fileName = `${title.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().split('T')[0]}.pptx`;
  await pptx.writeFile({ fileName });
};

const parseContentIntoSlides = (content: string, mainTitle: string) => {
  const slides = [];
  const lines = content.split('\n').filter(line => line.trim());
  
  // Title slide
  slides.push({
    title: mainTitle,
    content: ['Generated by EasyTeach AI Assistant']
  });
  
  let currentSlide = null;
  let currentContent = [];
  
  for (const line of lines) {
    const trimmedLine = line.trim();
    
    // Check if line is a header (starts with #, or is all caps, or ends with :)
    if (isHeader(trimmedLine)) {
      // Save previous slide if exists
      if (currentSlide) {
        slides.push({
          title: currentSlide,
          content: [...currentContent]
        });
      }
      
      // Start new slide
      currentSlide = trimmedLine.replace(/^#+\s*/, '').replace(/:$/, '');
      currentContent = [];
    } else if (trimmedLine) {
      // Add content to current slide
      currentContent.push(trimmedLine);
      
      // If we have too much content, split into new slide
      if (currentContent.length > 6) {
        slides.push({
          title: currentSlide || 'Content',
          content: currentContent.slice(0, 6)
        });
        
        currentSlide = currentSlide ? `${currentSlide} (continued)` : 'Content (continued)';
        currentContent = currentContent.slice(6);
      }
    }
  }
  
  // Add final slide if there's remaining content
  if (currentSlide && currentContent.length > 0) {
    slides.push({
      title: currentSlide,
      content: currentContent
    });
  }
  
  // If no structured content found, create slides from paragraphs
  if (slides.length === 1) {
    const paragraphs = content.split('\n\n').filter(p => p.trim());
    paragraphs.forEach((paragraph, index) => {
      const sentences = paragraph.split('.').filter(s => s.trim());
      slides.push({
        title: `Content ${index + 1}`,
        content: sentences.map(s => s.trim() + (s.trim() ? '.' : '')).filter(s => s.length > 1)
      });
    });
  }
  
  return slides;
};

const isHeader = (line: string): boolean => {
  // Check various header patterns
  return (
    line.startsWith('#') ||
    line.endsWith(':') ||
    (line === line.toUpperCase() && line.length > 3 && line.length < 50) ||
    /^(lesson|objective|activity|assessment|introduction|conclusion|summary)/i.test(line) ||
    /^\d+\.\s/.test(line) // Numbered headers
  );
};
